package com.jlj.util;

import java.util.ArrayList;
import java.util.List;

import org.springframework.jms.core.JmsTemplate;

import com.jlj.vo.PharseVO;


public class TestMain {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		// TODO Auto-generated method stub
		String test1 = "3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d22474232333132223f3e3c6d6573736167652053797374656d3d225a544543454e54455222205665723d22312e3030223e3c73797374656d747970653e4a4152495554433c2f73797374656d747970653e3c6d657373616765747970653e524551554553543c2f6d657373616765747970653e3c736f7572636549503e3230313530383330313730393430383537343c2f736f7572636549503e3c74617267657449503e4a4152495554433c2f74617267657449503e3c757365723e45484c3c2f757365723e3c70617373776f72643e45484c3132333435363c2f70617373776f72643e3c726571756573743e3c726f616469643e313739333c2f726f616469643e3c747970653e5349474e414c53544152543c2f747970653e3c6e6f3e303c2f6e6f3e3c2f726571756573743e3c2f6d6573736167653e";
		String test2 = "3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d22474232333132223f3e3c6d6573736167652053797374656d3d225a544543454e54455222205665723d22312e3030223e3c73797374656d747970653e4a4152495554433c2f73797374656d747970653e3c6d657373616765747970653e524551554553543c2f6d657373616765747970653e3c736f7572636549503e3230313530383330313831333536383636363c2f736f7572636549503e3c74617267657449503e4a4152495554433c2f74617267657449503e3c757365723e45484c3c2f757365723e3c70617373776f72643e45484c3132333435363c2f70617373776f72643e3c726571756573743e3c726f616469643e313738373c2f726f616469643e3c747970653e5349474e414c454e443c2f747970653e3c6e6f3e303c2f6e6f3e3c2f726571756573743e3c2f6d6573736167653e
		String test3 = "><roadid>1917</roadid><";
		
		String number = test3.substring(test3.lastIndexOf("<roadid>")+8,test3.indexOf("</roadid>"));
		System.out.println(number);
		
		//System.out.println(TestMain.hexString2String(test1));
		//System.out.println(TestMain.hexString2String(test2));
	}
	
    /*
     * 
     */  
    private static List<String> splitAry(String[] ary, int subSize) {  
          int count = 16;  
          List<String> subAryList = new ArrayList<String>();  
  
          for (int i = 0; i < subSize; i++) {
        	  
        	  String dates = "";
        	  
        	  for (int j = 0; j < count; j++) {
        		  	
        		  dates = dates + ary[j+i*count]+",";
        	  }
        	  subAryList.add(dates);
        	  
          }
            
          return subAryList;  
    }  

    
    /** 
     * @Title:bytes2HexString 
     * @Description:字节数组转16进制字符串 
     * @param b 
     *            字节数组 
     * @return 16进制字符串 
     * @throws 
     */  
    public static String bytes2HexString(byte[] b) {  
        StringBuffer result = new StringBuffer();  
        String hex;  
        for (int i = 0; i < b.length; i++) {  
            hex = Integer.toHexString(b[i] & 0xFF);  
            if (hex.length() == 1) {  
                hex = '0' + hex;  
            }  
            result.append(hex.toUpperCase());  
        }  
        return result.toString();  
    }  
  
    /** 
     * @Title:hexString2Bytes 
     * @Description:16进制字符串转字节数组 
     * @param src 
     *            16进制字符串 
     * @return 字节数组 
     * @throws 
     */  
    public static byte[] hexString2Bytes(String src) {  
        int l = src.length() / 2;  
        byte[] ret = new byte[l];  
        for (int i = 0; i < l; i++) {  
            ret[i] = (byte) Integer  
                    .valueOf(src.substring(i * 2, i * 2 + 2), 16).byteValue();  
        }  
        return ret;  
    }  
  
    /** 
     * @Title:string2HexString 
     * @Description:字符串转16进制字符串 
     * @param strPart 
     *            字符串 
     * @return 16进制字符串 
     * @throws 
     */  
    public static String string2HexString(String strPart) {  
        StringBuffer hexString = new StringBuffer();  
        for (int i = 0; i < strPart.length(); i++) {  
            int ch = (int) strPart.charAt(i);  
            String strHex = Integer.toHexString(ch);  
            hexString.append(strHex);  
        }  
        return hexString.toString();  
    }  
  
    /** 
     * @Title:hexString2String 
     * @Description:16进制字符串转字符串 
     * @param src 
     *            16进制字符串 
     * @return 字节数组 
     * @throws 
     */  
    public static String hexString2String(String src) {  
        String temp = "";  
        for (int i = 0; i < src.length() / 2; i++) {  
            temp = temp  
                    + (char) Integer.valueOf(src.substring(i * 2, i * 2 + 2),  
                            16).byteValue();  
        }  
        return temp;  
    }  
      
    /** 
     * @Title:char2Byte 
     * @Description:字符转成字节数据char-->integer-->byte 
     * @param src 
     * @return 
     * @throws 
     */  
    public static Byte char2Byte(Character src) {  
        return Integer.valueOf((int)src).byteValue();  
    }  
      
        /** 
     * @Title:intToHexString 
     * @Description:10进制数字转成16进制 
     * @param a 转化数据 
     * @param len 占用字节数 
     * @return 
     * @throws 
     */  
    private static String intToHexString(int a,int len){  
        len<<=1;  
        String hexString = Integer.toHexString(a);  
        int b = len -hexString.length();  
        if(b>0){  
            for(int i=0;i<b;i++)  {  
                hexString = "0" + hexString;  
            }  
        }  
        return hexString;  
    } 

}
